list = [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4]

# for i in list:
#     list.remove(i)
#     print(list)
#输出是这个样子的，不是一直从头部删除的
# [1, 1, 1, 1, 1, 1, 1, 2, 3, 4]
# [1, 1, 1, 1, 1, 1, 2, 3, 4]
# [1, 1, 1, 1, 1, 2, 3, 4]
# [1, 1, 1, 1, 2, 3, 4]
# [1, 1, 1, 1, 3, 4]
# [1, 1, 1, 1, 3]
#原因：remove后，整个列表的元素会往前移，而i是固定的，往后移动的

#改进，遍历也遍历新列表
for i in list[:]: #用list[::]也是一样的
     list.remove(i)
     print(list)
# [1, 1, 1, 1, 1, 1, 1, 2, 3, 4]
# [1, 1, 1, 1, 1, 1, 2, 3, 4]
# [1, 1, 1, 1, 1, 2, 3, 4]
# [1, 1, 1, 1, 2, 3, 4]
# [1, 1, 1, 2, 3, 4]
# [1, 1, 2, 3, 4]
# [1, 2, 3, 4]
# [2, 3, 4]
# [3, 4]
# [4]
# []
#结果正确

# for i in range(len(list)):  # 错误的实现
#     list.remove(list[i])
#IndexError: list index out of range
#原因：i的取值是[0,len(list))，但列表删除后长度不够i访问

#改进，倒着删除
for i in range(len(list)-1,-1,-1):
    list.remove(list[i])
    print(list)
#结果正确

# 迭代器遍历 实现删除  作业1
#在Python中我没有找到用迭代器怎么删除，我用java实现一下吧





